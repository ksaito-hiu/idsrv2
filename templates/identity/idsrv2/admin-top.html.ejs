<script src="https://cdn.jsdelivr.net/npm/@inrupt/solid-client-authn-browser@2/dist/solid-client-authn.bundle.js"></script>

<h1>Admin Top</h1>

<div>
  <p id="webid_info">You are logged in as &lt;...&gt;.</p>
  <p id="not_login_info">You are not logged in.</p>
  <div id="webid_logout_div"><button id="webid_logout_btn">WebID logout</button></div>
  <div id="webid_login_div"><button id="webid_login_btn">WebID login</button></div>
</div>

<div id="admin_ui">

  <h2>アカウント追加</h2>

  <div id="add_account_div">
    <p>idsrv2_id:<input id="idsrv2_id" type="text"></p>
    <p>google_sub:<input id="google_sub" type="text"></p>

    <button id="add_account_btn">アカウント追加</button>
  </div>

  <h2>アカウント削除</h2>

  <div id="del_account_div">
    <p>この削除機能はテスト段階です。</p>
    <p>idsrv2_id:<input id="idsrv2_id2" type="text"></p>

    <button id="del_account_btn">アカウント削除</button>
  </div>

  <h2>アカウント情報のバックアップ</h2>

  <div id="backup_accounts_div">
    <p>Use Google Chrome or Edge to open file picker.</p>
    <div><button id="backup_accounts_btn1">バックアップ開始</button>
         <button id="backup_accounts_btn2" style="display: none;">準備完了:ダウンロード</button></div>
  </div>

  <h2>アカウント情報のリストア</h2>

  <div id="restore_accounts_div">
    <p>Use Google Chrome or Edge to open file picker.</p>
    <p>一旦データを全て空にしてからリストアして下さい。</p>
    <div><button id="restore_accounts_btn">リストア</button></div>
  </div>

</div>

<script>
  (async() => {
    let controls = await fetchControls('<%= idpIndex %>');

    // Inruptのsolid-client-authn-browserパッケージでWebIDを
    // 使ったLoginとLogoutを実行
    window.auth = window.solidClientAuthentication;
    async function completeLogin() {
      const info = await auth.handleIncomingRedirect();
      console.log("ページの状態把握完了(?): ",info);
      const a = document.querySelector('#admin_ui');
      const p1 = document.querySelector('#webid_info');
      const p2 = document.querySelector('#not_login_info');
      const d1 = document.querySelector('#webid_logout_div');
      const d2 = document.querySelector('#webid_login_div');
      if (info.isLoggedIn) {
        p1.textContent = "You are logged in as <"+info.webId+">.";
        p1.style.display = "block";
        p2.style.display = "none";
        d1.style.display = "block";
        d2.style.display = "none";
        const isAuthorized = await testAuthorized();
        if (isAuthorized)
          a.style.display = "block";
        else
          a.style.display = "none";
      } else {
        p1.style.display = "none";
        p2.style.display = "block";
        d1.style.display = "none";
        d2.style.display = "block";
        a.style.display = "none";
      }
    }
    await completeLogin();

    // 管理者の資格があるかどうかテストする
    async function testAuthorized() {
      const data = { 'kind': 'testAuthorize', 'data': "dummy" };
      const res = await auth.fetch(controls.idsrv2.admin,{ // auth.fetch使うの忘れずに
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });
      const j = await res.json();
      if (j.output && j.output === "ok")
        return true;
      else
        return false;
    }

    async function myLogin() {
      const oidcIssuer = prompt("Input your issuer:","https://solidcommunity.net");
      //const oidcIssuer = "https://solidcommunity.net";
      //const oidcIssuer = "https://id.do-johodai.ac.jp";
      //const oidcIssuer = "https://s314.ks1.org";
      //const oidcIssuer = "https://solidweb.me";
      //const oidcIssuer = "https://login.inrupt.com/";
      if (!auth.getDefaultSession().info.isLoggedIn) {
        try {
          await auth.login({
            oidcIssuer,
            redirectUrl: location.href,
            clientName: "My application"
          });
        } catch(e) {
console.log("GAHA2:",e);
        }
      } else {
        console.log("You had already logged in.");
      }
    }
    document.querySelector("#webid_login_btn").addEventListener("click", myLogin);

    async function myLogout() {
      await auth.logout();
      await completeLogin();
    }
    document.querySelector("#webid_logout_btn").addEventListener("click", myLogout);

    async function addAccount(e) {
      const idsrv2_id = document.querySelector('#idsrv2_id').value;
      const google_sub = document.querySelector('#google_sub').value;
      const data = { 'kind': 'addAccount', 'data': idsrv2_id+','+google_sub };
      const res = await auth.fetch(controls.idsrv2.admin,{ // auth.fetch使うの忘れずに
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });
      const j = await res.json();
console.log('GAHA1: ',j);
    }
    document.querySelector('#add_account_btn').addEventListener('click',addAccount);

    async function delAccount(e) {
      const idsrv2_id2 = document.querySelector('#idsrv2_id2').value;
      const data = { 'kind': 'delAccount', 'data': idsrv2_id2 };
      const res = await auth.fetch(controls.idsrv2.admin,{ // auth.fetch使うの忘れずに
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });
      const j = await res.json();
console.log('GAHA2: ',j);
    }
    document.querySelector("#del_account_btn").addEventListener('click',delAccount);

    // file pickerにはuser gestureが必要で、バックアップデータを
    // サーバーから受け取ってるうちにuser gestureのイベントの効果が
    // 切れるので2段階にしないといけない。
    let backupData = null;
    async function backupAccounts1(e) {
      document.querySelector("#backup_accounts_btn2").style.display="none";
      const data = { 'kind': 'backupAccounts', 'data': "dummy" };
      const res = await auth.fetch(controls.idsrv2.admin,{ // auth.fetch使うの忘れずに
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });
      const j = await res.json();
console.log('GAHA3: ',j);
      backupData = j.output;
      document.querySelector("#backup_accounts_btn2").style.display="block";
    }
    document.querySelector("#backup_accounts_btn1").addEventListener('click',backupAccounts1);

    async function backupAccounts2(e) {
      await saveStringToJsonFile(backupData);
      document.querySelector("#backup_accounts_btn2").style.display="none";
      backupData = null;
    }
    document.querySelector("#backup_accounts_btn2").addEventListener('click',backupAccounts2);

    async function restoreAccounts(e) {
      const jsonStr = await loadJsonStrFromOneFile();
      const data = { 'kind': 'restoreAccounts', 'data': jsonStr };
      const res = await auth.fetch(controls.idsrv2.admin,{ // auth.fetch使うの忘れずに
        method: 'POST',
        headers: { 'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });
      const j = await res.json();
console.log('GAHA4: ',j);
    }
    document.querySelector("#restore_accounts_btn").addEventListener('click',restoreAccounts);

// ***************************************************************

    // 引数の文字列データをファイルピッカでJSONとして保存
    async function saveStringToJsonFile(jsonStr) {
      // 以下の設定でファイルピッカーを開く。
      const options = {
        excludeAcceptAllOption: false, // ←テキスト以外を選択できなくする
        suggestedName: "accounts.json",
        types: [
          { description: "Json", accept: { "application/json": [".json"] }}
        ]
      };

      try {
        // FileSystemFileHandleオブジェクトがPromiseで帰ってくる。
        const handle = await window.showSaveFilePicker(options);
        const writable = await handle.createWritable();
        writable.write(jsonStr);
        writable.close();
      } catch(e) {
        // ユーザがファイルの選択をキャンセルした時などにここにくる
        alert(e);
      }
    }

    // ファイルピッカでファイルを選んでJSON文字列を返す
    async function loadJsonStrFromOneFile() {
      // 今回は1つしかファイルを選択しないという設定と前提で前提で、
      // 設定するoptionsを作る。
      const options = {
        multiple: false,
        excludeAcceptAllOption: false, // ←JSON以外を選択できなくする
        types: [
          { description: "JsonFile", accept: { "application/json": [".json"] }}
        ]
      };

      try {
        // FileSystemFileHandleオブジェクトの配列がPromiseで帰ってくる。
        // ただ今回はオプションで1個限定にしているので以下の書き方がスマート。
        const [handle] = await window.showOpenFilePicker(options);
        const file = await handle.getFile();
        const text = await file.text();
        return text;
      } catch(e) {
        // ユーザがファイルの選択をキャンセルした時などにここにくる
        alert(e);
        return null
      }
    }

  })();
</script>
